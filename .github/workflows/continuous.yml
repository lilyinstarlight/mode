name: Continuous Builds

on: push

jobs:
  linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run .ci/linux.sh
        run: |
          case "$GITHUB_REF" in
            refs/tags/v*)
              export UPDATE_INFORMATION='gh-releases-zsync|lilyinstarlight|mode|latest|mode-*-linux.AppImage.zsync'
              ;;

            *)
              export UPDATE_INFORMATION='gh-releases-zsync|lilyinstarlight|mode|continuous|mode-*-linux.AppImage.zsync'
              ;;
          esac

          .ci/linux.sh

      - uses: actions/upload-artifact@v2
        with:
          name: mode-linux
          path: |
            mode.AppImage
            mode.AppImage.zsync

  macos:
    name: macOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run .ci/macos.sh
        run: |
          .ci/macos.sh

      - uses: actions/upload-artifact@v2
        with:
          name: mode-macos
          path: mode.zip

  windows:
    name: Windows Build
    runs-on: windows-latest
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run .ci/windows.ps1
        shell: powershell
        run: |
          .ci/windows.ps1

      - uses: actions/upload-artifact@v2
        with:
          name: mode-windows
          path: mode.zip

  upload:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    name: Upload Release
    needs: [linux, macos, windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: mode-linux
          path: mode-linux

      - uses: actions/download-artifact@v2
        with:
          name: mode-macos
          path: mode-macos

      - uses: actions/download-artifact@v2
        with:
          name: mode-windows
          path: mode-windows

      - uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const os = require('os');

            const release = context.ref.startsWith('refs/tags/v');

            const tag = release ? context.ref.replace(/^refs\/tags\//i, '') : 'continuous';

            const name = release ? `.:mode:. ${tag}` : '.:mode:. Continuous';
            const body = release ? '' : 'Continuous builds are freshly baked on every push to the main branch. Unless otherwise specified, all builds are for x86_64.';
            const prerelease = !release;
            const draft = release;

            const assets = {
              [`mode-${tag}-linux.AppImage`]: './mode-linux/mode.AppImage',
              [`mode-${tag}-linux.AppImage.zsync`]: './mode-linux/mode.AppImage.zsync',
              [`mode-${tag}-macos.zip`]: './mode-macos/mode.zip',
              [`mode-${tag}-windows.zip`]: './mode-windows/mode.zip',
            };

            core.startGroup('Release information');

            core.info(`Release: ${release ? 'Yes' : 'No'}`);
            core.info(`Tag: ${tag}`);
            core.info(`Name: ${name}`);
            core.info(`Body:\n${body.split(/\r?\n/).map((line) => `  ${line}`).join(os.EOL)}`);
            core.info(`Prerelease: ${prerelease ? 'Yes' : 'No'}`);
            core.info(`Draft: ${draft ? 'Yes' : 'No'}`);
            core.info(`Assets:\n${Object.keys(assets).map((asset) => `  ${asset}`).join(os.EOL)}`);

            core.endGroup();

            core.startGroup('Ensure tag');

            const ref = await github.git.getRef({
              ...context.repo,
              ref: `tags/${tag}`,
            })
            .catch((err) => {
              if (err.status !== 404)
                throw err;

              core.info('Tag not found');
              core.info(`Creating tag '${tag}'`);

              return github.git.createRef({
                ...context.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha,
              });
            });

            if (ref.data.object.sha != context.sha) {
              core.info('Tag commit hash does not match');
              core.info(`Updating '${tag}' to ${context.sha}`);

              await github.git.updateRef({
                ...context.repo,
                ref: `tags/${tag}`,
                sha: context.sha,
                force: true,
              });
            }
            else {
              core.info(`Tag '${tag}' matches ${context.sha}`);
            }

            core.endGroup();

            core.startGroup('Create release');

            await github.repos.getReleaseByTag({
              ...context.repo,
              tag: tag,
            })
            .then((rel) => {
              core.info('Existing release found');
              core.info(`Deleting release with ID ${rel.data.id}`);

              return github.repos.deleteRelease({
                ...context.repo,
                release_id: rel.data.id,
              });
            })
            .catch((err) => {
              if (err.status !== 404)
                throw err;

              return null;
            });

            core.info(`Creating ${draft ? 'draft ' : ''}${prerelease ? 'prerelease' : 'release'} for tag '${tag}'`);

            const rel = await github.repos.createRelease({
              ...context.repo,
              tag_name: tag,
              name: name,
              body: body,
              prerelease: prerelease,
              draft: draft,
            });

            core.endGroup();

            core.startGroup('Upload release assets');

            for (let [asset_name, asset_path] of Object.entries(assets)) {
              core.info(`Uploading '${asset_name}' from '${asset_path}'`);

              await github.repos.uploadReleaseAsset({
                ...context.repo,
                release_id: rel.data.id,
                name: asset_name,
                data: fs.readFileSync(asset_path),
              });
            }

            core.endGroup();
